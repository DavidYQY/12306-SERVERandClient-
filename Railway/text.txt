#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QWidget>
#include <Qstring>
#include "mytcpserver.h"
#include "ui_mainwindow.h"
#include "mydatabase.h"
class mainwindow : public QWidget
{
	Q_OBJECT

public:
	mainwindow(int port,QString databaseAd,QWidget *parent = 0);
	~mainwindow();
signals:
	void serverWrite(QString);
	void serverWrite(QString,int _d);
public slots:
	void Mydebug(const QString&);
	void onNewUser(int,QString,int,QStringList a=QStringList());
	void onSendClicked();
	void onInfoClicked();
	void onDeleteClicked();
	void updateCurrentUser();
	void onRegisterUser(int);
	void onTicketInfo(QStringList);
	void onTrainInfo(QStringList);
	void onMidStationInfo(QStringList);
	void onReturnDeleteResult(int);
	void onUserAddMoneyResult(int);
	void onUserUpdateInfoResult(int);
	void onBuyTicketResult(int);
	void onAdminUpdateInfoResult(int);
	void onAddTrainResult(int);
	void onTrainUpdateResult(int);
	void onUserLogOut(QString);
	void onDeleteTrainResult(int);

private:
	Ui::mainwindow ui;
	int getRow(QTableWidget *,int);
	int getRow(QTableWidget *);
	void addUserInfo(QString,int,int);//userid and identity
	void addUserInfo(int);//descriptor
	bool IsLogin(const QString& UserId);

	MyTcpServer server;
	MyDataBase database;
};

#endif // MAINWINDOW_H

#ifndef MYDATABASE_H
#define MYDATABASE_H

#include <QObject>
#include <QSqlDatabase>
#include <QSQlQuery>
#include <QTime>
#include <QSqlError>
#include <QtDebug>
#include <QSqlDriver>
#include <QSqlRecord>
#include "train.h"
#include "ticket.h"
#include "user.h"
#include "admin.h"
enum id
{
	User=1,
	Admin=2,
};
class MyDataBase : public QObject
{
	Q_OBJECT

public:
	MyDataBase(QObject *parent=0);
	~MyDataBase();
	bool createConnection(QString);
	bool createTables();
	bool queryAll(QString);//查询所有信息
	QStringList queryInfo(QString table,QString UserId);//在table里找到对应用户名的全部信息
	bool addTrain(QString date);
	bool deleteTrain(QString date);//过了今天就把这车删了.
	bool deleteTicket(QString date);//过了今天就把票也删了.
	QString date;//今天

signals:
	void newdebug(const QString&);
	void newUser(int,QString,int,QStringList a=QStringList());
	void registerUser(int);
	void userTicketInfo(QStringList);
	void trainInfo(QStringList);
	void returndeleteResult(int);
	void midStationInfo(QStringList);
	void userAddMoneyResult(int);
	void userUpdateInfoResult(int);
	void buyTicketResult(int);
	void adminUpdateInfoResult(int);
	void addTrainResult(int);
	void trainUpdateResult(int);
	void deleteTrainResult(int);

public slots:
	void checkNewUser(QString,QString);
	void registerNewUser(QString,QString,QString,QString,QString,QString,QString,QString,QString);//接收一堆
	void onTicketQuery(QString);
	void onTrainQuery(Train t);
	void onTicketReturn(Ticket t);
	void onMidStationQuery(Train t);
	void onUserAddMoney(UserClass t);
	void onUserUpdateInfo(UserClass u);
	void onBuyTicket(Ticket);
	void onUpdateAdminInfo(admin);
	void onAddTrainInfo(Train);
	void onUpdateTrainInfo(Train);
	void onDeleteTrain(Train);

private:
	QString DateBaseName;
	QSqlDatabase db;
	QString tranlateDate(QString);
	void aux_addTrain(const Train& t);
	int addUser(QString,QString,QString,QString,QString,QString,QString,QString,QString);//往数据库里加user
	int query(QString table,QString UserId,QString);//在table里查询用户名密码是否匹配。
	QStringList queryUserTicketInfo(QString UserId);//在ticket里找到用户购买票的信息。
	QStringList queryTrainInfo(Train t);//在train里找到制定要求的train
	QStringList queryMidStationInfo(Train t);//在train里找到train的所有中间站
	QStringList aux_getTrains(Train t);//找到所有符合条件的车次名
	int ticketReturn(Ticket t);//返回ticketreturn的结果。
	int addUserMoney(UserClass u);
	int aux_getItemNumber(QString table);//获取table中数条目数
	int aux_getStationNum(Train t);//找到火车t(在某天)的所有车站数。
	int aux_getSeatNum(Train t);//根据trainid找到他的座位数
	int aux_getType(Train t);//根据id找到type
	int aux_getLeftTicket(Train t);
	int aux_getOriginStationId(Ticket t);
	int aux_getDestinationStationId(Ticket t);
	double aux_getCurrentMoney(UserClass u);
	double aux_getPrice(Ticket t);
	QStringList aux_getTrainTicketInfo(Train t);
	int addUserMoney(double money,QString user);
	int updateUserInfo(UserClass u);
	int addTicket(Ticket t);
	QString aux_getOriginTime(Train t);
	QString aux_getEndTime(Train t);
	QString aux_getEndTime(Ticket t);//找到这张票destination对应的时间
	double aux_getTrainPrice(const Train& t);
	int updateAdminInfo(admin a);
	QList<Train> aux_getRegularTrain();//从regulartrain里读数据出来存到Qlist
	int addTrain(Train);
	int updateTrainInfo(Train t);
	bool aux_IsExists(QString table,QString TrainId,QString Starttime);
	int aux_updateTrainInfo(QString table,Train t);
	int deleteTrain(Train t);
	int aux_deleteTrain(QString table,Train t);
};

#endif // MYDATABASE_H
#include "mydatabase.h"
#include <Qfile>
#include "train.h"
#include<cmath>
#include <cstdlib>
#include <ctime>
enum cartype
{
	sitseat=120,
	sleepseat=60,
};
const int days=10;//添加数据大小
const double sitPricePerkm=0.5;
const double sleepPricePerkm=0.6;

//initial operation
MyDataBase::MyDataBase(QObject *parent)
	: QObject(parent)
{
}
bool MyDataBase::createConnection(QString _name)
{
	DateBaseName=_name;
	if (!QFile::exists(DateBaseName))
		emit newdebug(QStringLiteral("正在创建数据库..."));
	else
	{
		emit newdebug(QStringLiteral("正在加载已有数据库..."));
	}
	db=QSqlDatabase::addDatabase("QSQLITE");
	db.setDatabaseName(DateBaseName);
	if (!db.open())
	{
		emit newdebug("Fatal Error!unable to link database!");
		return false;
	}
	return true;
}
bool MyDataBase::createTables()
{
	QSqlQuery query(db);
	query.prepare("create table IF NOT EXISTS USER"
				"(UserId VARCHAR PRIMARY KEY,PassWord TEXT,Name VARCHAR,Sex INT,"
				"Credentials TEXT,Contact TEXT,Nation TEXT,Identity TEXT, Addition TEXT)");
	if(!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table USER!");
		return false;
	}
	query.prepare("create table IF NOT EXISTS Administrator"
				"(UserId VARCHAR PRIMARY KEY,PassWord TEXT,Name VARCHAR,"
				"Contact TEXT,Position TEXT)");
	if (!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table Administrator!");
		return false;
	}
	query.prepare("create table IF NOT EXISTS Ticket"
		"(TrainId VARCHAR,StartTime DateTime,Origin TEXT,Destination TEXT,Seat VARCHAR,UserId VARCHAR,TicketType int,Price DECIMAL,primary key(TrainId,Origin,Seat))");
	if (!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table Ticket!");
		return false;
	}
	query.prepare("create table IF NOT EXISTS Train"
		"(TrainId VARCHAR, StartTime DateTime,EndTime DateTime,Origin VARCHAR,Destination VARCHAR, CarType int, Price int,StationId int, primary key(TrainId,StartTime))");
	if (!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table Train!");
		return false;
	}
	query.prepare("create table IF NOT EXISTS cartype"
		"(CarType INT PRIMARY KEY, SeatNum INT) ");
	if (!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table cartype!");
		return false;
	}
	query.prepare("create table IF NOT EXISTS Account"
		"(UserId INT PRIMARY KEY, Money Decimal) ");
	if (!query.exec())
	{
		emit newdebug("Fatal error!Failed to create table Account!");
		return false;
	}
	return true;
}
MyDataBase::~MyDataBase()
{

}
bool MyDataBase::queryAll(QString table)
{
	QSqlQuery query(db);
	if (!query.exec("select * from ('"+table+"')"))
		return false;
	QSqlRecord rec=query.record();
	qDebug()<<table+".count"<<rec.count();
	while(query.next())
	{
		for (int index=0;index<7;index++)
			qDebug()<<query.value(index)<<" ";
		qDebug()<<"\n";
	}
	return true;
}
bool MyDataBase::addTrain(QString date)//包括train和cartype的信息。
{
	int itemNum=0;
	bool flag1=true,flag2=true;
	QSqlQuery query(db);
	QList<Train> result=aux_getRegularTrain();
	QString p;
	itemNum=aux_getItemNumber("train");
	//if (itemNum>=days*result.length())//已添加。
	//	flag1=false;
	itemNum=aux_getItemNumber("cartype");
	if (itemNum>=2)//已添加。
		flag2=false;
	if (flag1)
	{
	QString buffer1;
	QString Mydate,Mydate2;
	Train target;
	
	for (int i=0;i<days;i++)
	{
		for (int j=0;j<result.length();j++)
		{
			Train t=result.at(j);
			if (t.StartTime>t.EndTime)//认为隔天
			{
				Mydate=QDateTime::fromString(date,"yyyy-MM-dd").addDays(i).toString("yyyy/MM/dd");
				t.StartTime=Mydate+" "+t.StartTime;
				Mydate2=QDateTime::fromString(date,"yyyy-MM-dd").addDays(i+1).toString("yyyy/MM/dd");
				t.EndTime=Mydate2+" "+t.EndTime;
			}
			else
			{
				Mydate=QDateTime::fromString(date,"yyyy-MM-dd").addDays(i).toString("yyyy/MM/dd");
				t.StartTime=Mydate+" "+t.StartTime;
				t.EndTime=Mydate+" "+t.EndTime;
			}
			aux_addTrain(t);
		}
	}
	}
	if (flag2)
	{
		p=QString("insert into cartype values(0,%1,%2)").arg(sitseat).arg(sitPricePerkm);
		query.prepare(p);
		if (!query.exec())
		{
			emit newdebug("add cartype error!");
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
		}
		p=QString("insert into cartype values(1,%1,%2)").arg(sleepseat).arg(sleepPricePerkm);
		query.prepare(p);
		if (!query.exec())
		{
			emit newdebug("add cartype error!");
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
		}

	}
	return true;
}
bool MyDataBase::deleteTrain(QString date)
{
	QSqlQuery query(db);
	QString content=QString("delete"
							" from train"
							" where StartTime<'%1'").arg(date);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return false;
	}
	return true;
}
bool MyDataBase::deleteTicket(QString date)
{
	QSqlQuery query(db);
	QString content=QString("delete"
							" from ticket"
							" where StartTime<'%1'").arg(date);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return false;
	}
	return true;
}

//slots
void MyDataBase::onTicketQuery(QString Userid)
{
	QStringList result=queryUserTicketInfo(Userid);
	emit userTicketInfo(result);
}
void MyDataBase::onTrainQuery(Train t)
{
	QStringList result=queryTrainInfo(t);
	emit trainInfo(result);
}
void MyDataBase::onTicketReturn(Ticket t)
{
	int flag=ticketReturn(t);
	emit returndeleteResult(flag);
}
void MyDataBase::onMidStationQuery(Train t)
{
	//int num=aux_getStationNum(t);
	//emit newdebug(QString("%1").arg(num));
	QStringList result=queryMidStationInfo(t);
	emit midStationInfo(result);
}
void MyDataBase::registerNewUser(QString UserId,QString PassWord,QString name,QString sex,
						QString nation,QString credencial,QString contact,QString identity,QString addition)
{
	int flag=addUser(UserId,PassWord,name,sex,nation,credencial,contact,identity,addition);
	emit registerUser(flag);
}
void MyDataBase::checkNewUser(QString name,QString password)
{
	//emit newdebug("checking!");
	int flag1=query("USER",name,password);
	int flag2=query("Administrator",name,password);
	if (flag1==2)
	{
		QStringList temp=queryInfo("USER",name);
		emit newUser(2,name,User,temp);
		return ;
	}
	if (flag2==2)
	{
		QStringList temp=queryInfo("Administrator",name);
		emit newUser(2,name,Admin,temp);
		return ;
	}
	if (flag1==1 && flag2==1)//xuser
	{
		emit newUser(1,name,User);
		return ;
	}
	if (flag1==-1 || flag2==-1)//Query error!
	{
		emit newUser(-1,name,User);
		return ;
	}
	emit newUser(0,name,User);//xpassword
}
void MyDataBase::onUserAddMoney(UserClass u)
{
	if (u.UserId=="")
	{
		emit userAddMoneyResult(-1);
		return ;
	}
	int flag=addUserMoney(u);
	emit userAddMoneyResult(flag);
}
void MyDataBase::onUserUpdateInfo(UserClass u)
{
	int flag=updateUserInfo(u);
	emit userUpdateInfoResult(flag);
}
void MyDataBase::onBuyTicket(Ticket t)
{
	int flag=addTicket(t);
	emit buyTicketResult(flag);
}
void MyDataBase::onUpdateAdminInfo(admin a)
{
	int flag=updateAdminInfo(a);
	emit adminUpdateInfoResult(flag);
}
void MyDataBase::onAddTrainInfo(Train t)
{
	int flag=addTrain(t);
	emit addTrainResult(flag);
}
void MyDataBase::onUpdateTrainInfo(Train t)
{
	int flag=updateTrainInfo(t);
	emit trainUpdateResult(flag);
}
void MyDataBase::onDeleteTrain(Train t)
{
	int flag=deleteTrain(t);
	emit deleteTrainResult(flag);
}

//operations on slots
int MyDataBase::ticketReturn(Ticket t)
{
	int itemNum1,itemNum2;

	//钱还给人家
	QSqlQuery query(db);
	double addmoney=aux_getPrice(t);

	QString temp=QString("delete from ticket where UserId='%1' and TrainId='%2' and Starttime='%3'")
		.arg(t.UserId).arg(t.TrainId).arg(t.StartTime);
	itemNum1=aux_getItemNumber("ticket");
	query.prepare(temp);
	if (!query.exec())
	{
		emit newdebug("ticket return error!");
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
	}
	itemNum2=aux_getItemNumber("ticket");
	if (itemNum2!=-1 && itemNum1!=-1)
	{
		if (itemNum1==itemNum2+1)//删除成功
		{
			addUserMoney(addmoney,t.UserId);
			return 1;
		}
		if (itemNum1>itemNum2+1)//多删了
			return 2;
		if (itemNum1<itemNum2+1)//没删
			return 0;
	}
	else
	{
		return -1;//这属于莫名其妙。
	}
}
QStringList MyDataBase::queryTrainInfo(Train t)
{
	QStringList result;result.clear();
	/*test*/
	QStringList trainids=aux_getTrains(t);
	int trainNum=trainids.length();
	Train target;
	//for (int i=0;i<trainNum;i++)//对每一辆车,计算余量
	//{
	//	Train target;
	//	target.TrainId=trainids.at(i);
	//	target.maxSeatNum=aux_getSeatNum(target);
	//	QStringList result =aux_getTrainTicketInfo(target);
	//	//emit newdebug(QString("%1:%2").arg(target.TrainId).arg(target.maxSeatNum));
	//}
	QSqlQuery query(db);
	//emit newdebug(t.EndTime);
	QString date=QDateTime::fromString(t.EndTime,"yyyy/MM/dd ss:mm").toString("yyyy/MM/dd");//这qdatetime不能24:00什么情况啊
	//emit newdebug(date);
	QString temp=QString("select a.trainid,a.Origin,b.Destination,a.StartTime,b.EndTime,a.CarType,(a.StationId<>0),"
						" (select MAX(StationId) from Train where TrainId=a.TrainId)!=b.StationId,a.stationid,b.stationid"
						" from train as a,train as b"
						"  where a.Starttime>'%1' and a.Starttime<'%2' and "
						" (select min(endtime) from train where trainid=a.TrainId and starttime>=a.StartTime and stationid="
						" (select MAX(StationId) from Train where TrainId=a.TrainId))>=b.EndTime"
						" and b.EndTime>=a.starttime "
						" and a.trainid=b.trainid and a.origin like '%3%' and b.destination like '%4%' "
						" order by a.starttime asc")
						.arg(t.StartTime).arg(t.EndTime).arg(t.Origin).arg(t.Destination);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	result.append(QString("%1;").arg(trainNum));
	QSqlRecord rec=query.record();
	while(query.next())//每个都是一辆车
	{
		for (int i=0;i<rec.count();i++)
		{
			if (i==0) target.TrainId=query.value(i).toString();
			if (i==1) target.Origin=query.value(i).toString();
			if (i==2) target.Destination=query.value(i).toString();
			if (i==3) target.StartTime=query.value(i).toString();
			if (i==4) target.EndTime=query.value(i).toString();
			if (i==5) target.carType=query.value(i).toInt();
			if (i==6) target.flag1=query.value(i).toBool();
			if (i==7) target.flag2=query.value(i).toBool();
			if (i==8) target.originStationId=query.value(i).toInt();
			if (i==9) target.endStationId=query.value(i).toInt();
		}
		target.maxSeatNum=aux_getSeatNum(target);
		target.leftSeat=aux_getLeftTicket(target);//计算余票
		int price=floor(aux_getTrainPrice(target));
		result.append(target.TrainId);
		result.append(target.Origin);
		result.append(target.Destination);
		result.append(target.StartTime);
		result.append(target.EndTime);
		result.append(QString("%1").arg(target.carType));
		result.append(QString("%1").arg(price));
		result.append(QString("%1").arg(target.leftSeat));
		result.append(QString("%1").arg(target.flag1));
		result.append(QString("%1").arg(target.flag2));
		result.append(";");
	}
	return result;
}
QStringList MyDataBase::queryInfo(QString table,QString UserId)
{
	QStringList temp;temp.clear();
	QSqlQuery query(db);
	QString content=QString("select a.*,b.money from %1 as a, account as b WHERE a.UserId='%2' and b.UserId='%2'").arg(table).arg(UserId);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
	}
	QSqlRecord rec=query.record();
	if (!rec.count())
	{
		emit newdebug("queryInfo error!");
	}
	while(query.next())
	{
		for (int i=0;i<rec.count();i++)
		{
			if (query.value(i).toString().isEmpty()|| query.value(i).toString()==",")
				temp.append("null");
			else 
				temp.append(query.value(i).toString());
		}
	}
	return temp;
}
QStringList MyDataBase::queryUserTicketInfo(QString UserId)
{
	QStringList result;result.clear();
	QSqlQuery query(db);
	Ticket t;
	QString temp=QString("select trainid,starttime,origin,destination,seat,price,tickettype "
						" from ticket" 
						" where userid='%1'")
						.arg(UserId);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	query.last();int num=query.at()+1;
	query.first();query.previous();
	result.append(QString("%1;").arg(num));
	QSqlRecord rec=query.record();
	while(query.next())
	{
		for (int i=0;i<rec.count();i++)
		{
			if(i==0) t.TrainId=query.value(i).toString();
			if (i==1) t.StartTime=query.value(i).toString();
			if (i==2) t.Origin=query.value(i).toString();
			if (i==3) t.Destination=query.value(i).toString();
			if (i==4) t.Seat=query.value(i).toInt();
			if (i==5) t.price=query.value(i).toDouble();
			if (i==6) t.Tickettype=query.value(i).toInt();
		}
		Train train;train.TrainId=t.TrainId;train.StartTime=t.StartTime;
		t.cartype=aux_getType(train);
		t.EndTime=aux_getEndTime(t);
		result.append(t.TrainId);
		result.append(t.Origin);
		result.append(t.Destination);
		result.append(t.StartTime);
		result.append(t.EndTime);
		result.append(QString("%1").arg(t.cartype));
		result.append(QString("%1").arg(t.Seat));
		result.append(QString("%1").arg(t.price));
		result.append(QString("%1").arg(t.Tickettype));
		result.append(";");
	}
	return result;
}
QStringList MyDataBase::queryMidStationInfo(Train t)
{
	QStringList result;result.clear();
	QSqlQuery query(db);
	QString originTime=aux_getOriginTime(t);
	QString endTine=aux_getEndTime(t);
	QString date=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("yyyy/MM/dd");
	QString temp=QString("select trainId, origin, destination, starttime,endtime,stationid"
						 " from train"
						 " where trainid='%1' and starttime >= '%2' and starttime<='%3'" 
						 " order by stationid asc").arg(t.TrainId).arg(originTime).arg(endTine);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	query.last();int num=query.at()+1;
	query.first();query.previous();
	result.append(QString("%1;").arg(num));
	QSqlRecord rec=query.record();
	while(query.next())
	{
		for (int i=0;i<rec.count();i++)
		{
			if (query.value(i).toString().isEmpty()|| query.value(i).toString()==",")
				result.append("null");
			else 
				result.append(query.value(i).toString());
		}
		result.append(";");
	}
	return result;
}
int MyDataBase::addUser(QString UserId,QString PassWord,QString name,QString sex,
						QString nation,QString credencial,QString contact,QString identity,QString addition)
{
	QSqlQuery query(db);
	QSqlRecord rec;
	QString temp;
	temp=QString ("select * from USER where UserId='%1'").arg(UserId);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	rec=query.record();
	if (query.next())//找到userid=target
	{
		return 1;
	}

	temp=QString ("select * from USER where Credentials='%1'").arg(credencial);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		//emit newdebug("2");
		return -1;
	}
	rec=query.record();
	if (query.next())//找到身份证=target
		return 0;
	
	if (sex.contains("Male"))
		sex="1";
	else if (sex.contains("Fe"))
		sex="2";
	else
		sex="null";
	temp=QString("insert into USER values('%1','%2','%3',%4,'%5','%6','%7','%8','%9')")
		.arg(UserId).arg(PassWord).arg(name).arg(sex).arg(credencial).arg(contact).arg(nation).arg(identity).arg(addition);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		//emit newdebug("3");
		return -1;
	}
	
	//加入一个新的account;
	temp=QString("insert into account values('%1',0)").arg(UserId);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	return 2;
}
int MyDataBase::query(QString table,QString UserId,QString Password)
{
	QSqlQuery query(db);
	QString TruePassword;
	if (table=="USER" || table=="Administrator")
	{
		QString content=QString("select * from %1 WHERE UserId='%2'").arg(table).arg(UserId);
		query.prepare(content);
		if (!query.exec())
		{
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
			return -1;
		}
		QSqlRecord rec=query.record();
		if (!query.next())//没找到，xuser
			return 1;
		query.previous();
		while(query.next())
		{
			TruePassword=query.value("PassWord").toString();
			//emit newdebug(TruePassword);
		}
		
		if (TruePassword==Password)
			return 2;
		else
			return 0;
	}
	return -1;
}
int MyDataBase::addUserMoney(UserClass u)
{
	QSqlQuery query(db);
	double premoney=aux_getCurrentMoney(u);
	addUserMoney(u.addmoney,u.UserId);
	double currentmoney=aux_getCurrentMoney(u);
	if (abs(currentmoney-premoney-u.addmoney)<1e-2)
		return 1;//更新成功
	return 0;
}
int MyDataBase::updateUserInfo(UserClass u)
{
	QSqlQuery query(db);
	QString content=QString("update user"
							" set password='%1',name='%2',sex=%3,credentials='%4',"
							" contact='%5',nation='%6',identity='%7'"
							" where userid='%8'").arg(u.password).arg(u.name).arg(u.sex).arg(u.credentials)
							.arg(u.contact).arg(u.nation).arg(u.identity).arg(u.UserId);
	emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	return 1;
}
int MyDataBase::addTicket(Ticket t)
{
	QSqlQuery query(db);
	if (t.Seat==120)
		t.Seat=rand()%119;
	QString temp=QString("insert into ticket values('%1','%2','%3','%4',%5,'%6','%7','%8')")
		.arg(t.TrainId).arg(t.StartTime).arg(t.Origin).arg(t.Destination).arg(t.Seat)
		.arg(t.UserId).arg(t.Tickettype).arg(t.price);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	if (addUserMoney(-t.price,t.UserId))
		return 1;
	return 0;
}
int MyDataBase::updateAdminInfo(admin a)
{
	QSqlQuery query(db);
	QString content=QString("update administrator"
							" set password='%2',name='%3',contact='%4',position='%5'"
							" where userid='%1'").arg(a.userid).arg(a.password).arg(a.name)
							.arg(a.contact).arg(a.position);
	emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	return 1;
}
int MyDataBase::addTrain(Train t)
{
	if (t.addType==0)//永久添加
	{
		QSqlQuery query(db);
		QString starttime=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("hh:mm");
		QString endtime=QDateTime::fromString(t.EndTime,"yyyy/MM/dd hh:mm").toString("hh:mm");
		QString temp=QString("select * from regulartrain where trainid='%1' and starttime='%2'")
			.arg(t.TrainId).arg(starttime);
		//emit newdebug(temp);
		query.prepare(temp);
		if(!query.exec())
		{
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
			return -1;
		}
		if (query.next())
			return 0;

		QString Mydate1,Mydate2;
		temp=QString("insert into regularTrain values('%1','%2','%3','%4','%5',%6,%7, %8)")
			.arg(t.TrainId).arg(starttime).arg(endtime).arg(t.Origin).arg(t.Destination)
			.arg(t.carType).arg(t.length).arg(t.StationId);
		//emit newdebug(temp);
		query.prepare(temp);
		if (!query.exec())
		{
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
			return -1;
		}
		for (int i=0;i<days;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			aux_addTrain(t2);
		}
		return 1;
	}
	if (t.addType==1)//临时添加
	{
		QSqlQuery query(db);
		QString temp=QString("select * from train where trainid='%1' and starttime='%2'")
			.arg(t.TrainId).arg(t.StartTime);
		//emit newdebug(temp);
		query.prepare(temp);
		if(!query.exec())
		{
			QSqlError lastError=query.lastError();
			emit newdebug(lastError.text());
			return -1;
		}
		if (query.next())
			return 0;

		for (int i=0;i<t.addDays;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			aux_addTrain(t2);
		}
		return 1;
	}
	return -1;
}
int MyDataBase::updateTrainInfo(Train t)
{
	if(t.addType==1)//临时修改
	{
		for (int i=0;i<t.addDays;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			if (!aux_IsExists("train",t2.TrainId,t2.StartTime))
				return 1;
			if(!aux_updateTrainInfo("train",t2))
				return -1;
		}
	}
	if (t.addType==0)//永久修改
	{
		Train t2=t;
		t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").toString("hh:mm");
		t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").toString("hh:mm");
		for (int i=0;i<days;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			if (!aux_IsExists("train",t2.TrainId,t2.StartTime))
				break;
			if(!aux_updateTrainInfo("train",t2))
				return -1;
		}
		if (!aux_IsExists("regulartrain",t.TrainId,t2.StartTime))
			return 0;
		if (!aux_updateTrainInfo("regulartrain",t2))
			return -1;
		return 1;
	}
}
int MyDataBase::deleteTrain(Train t)
{
	if(t.addType==1)//临时删除
	{
		for (int i=0;i<t.addDays;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			//t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			if (!aux_IsExists("train",t2.TrainId,t2.StartTime))
				return 1;
			if(!aux_deleteTrain("train",t2))
				return -1;
		}
	}
	if (t.addType==0)//永久删除
	{
		Train t2=t;
		t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").toString("hh:mm");
		for (int i=0;i<days;i++)
		{
			Train t2=t;
			t2.StartTime=QDateTime::fromString(t2.StartTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			t2.EndTime=QDateTime::fromString(t2.EndTime,"yyyy/MM/dd hh:mm").addDays(i).toString("yyyy/MM/dd hh:mm");
			if (!aux_IsExists("train",t2.TrainId,t2.StartTime))
				break;
			if(!aux_deleteTrain("train",t2))
				return -1;
		}
		if (!aux_IsExists("regulartrain",t.TrainId,t2.StartTime))
			return 0;
		if (!aux_deleteTrain("regulartrain",t2))
			return -1;
		return 1;
	}
	return -1;
}

//aux fuctions
int MyDataBase::aux_getLeftTicket(Train t)
{
	//emit newdebug(QString("%1:%2").arg(t.originStationId).arg(t.endStationId));
	int statioNum=aux_getStationNum(t);
	int leftTicket=t.maxSeatNum;
	bool ** m;//开始构建二维动态数组
	m=new bool*[t.maxSeatNum+1];
	for(int i=0;i<t.maxSeatNum+1;i++)
		m[i]=new bool[statioNum];
	
	QSqlQuery query(db);
	if (t.TrainId=="0"|| t.StartTime=="0")
	{
		emit newdebug("getLeftTicket error!");
		return -1;
	}
	//QString date=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("yyyy/MM/dd");
	QString p=QString("select trainid,starttime,origin,destination,seat"
					" from ticket"
					" where trainid='%1' and starttime >= '%2' and starttime<='%3'").arg(t.TrainId).arg(t.StartTime).arg(t.EndTime);
	//emit newdebug(p);
	query.prepare(p);//查询购买此车的人的票
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	QSqlRecord rec=query.record();
	Ticket target;
	while (query.next())
	{
		for (int i=0;i<rec.count();i++)
		{
			if (i==0) target.TrainId=query.value(i).toString();
			if (i==1) target.StartTime=query.value(i).toString();
			if (i==2) target.Origin=query.value(i).toString();
			if (i==3) target.Destination=query.value(i).toString();
			if (i==4) target.Seat=query.value(i).toInt();
		}
		target.OriginStationId=aux_getOriginStationId(target);
		target.DestinationStaionId=aux_getDestinationStationId(target);
		for (int i=target.OriginStationId;i<=target.DestinationStaionId;i++)
			m[target.Seat][i]=false;
	}
	bool flag;//记录每一个座位是否有人坐
	for (int i=0;i<t.maxSeatNum;i++)
	{
		flag=false;
		for (int j=t.originStationId;j<=t.endStationId;j++)
			if (m[i][j]==false)
				flag=true;
		if (flag)
			leftTicket--;
	}

	delete[] m;
	return leftTicket;
}
int MyDataBase::aux_getStationNum(Train t)
{
	int stationNum=0;
	QSqlQuery query(db);
	if (t.TrainId=="0"|| t.StartTime=="0")
	{
		emit newdebug("getStationNum error!");
		return -1;
	}
	QString date=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("yyyy/MM/dd");
	QString p=QString("select MAX(StationId)+1 from Train "
		" where TrainId='%1' and starttime like '%2%'").arg(t.TrainId).arg(date);
	//emit newdebug(p);
	query.prepare(p);//查询train里的条目数
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		stationNum=query.value(0).toInt();
	return stationNum;
}
QStringList MyDataBase::aux_getTrains(Train t)
{
	QStringList result;result.clear();
	QSqlQuery query(db);
	QString temp=QString("select distinct a.trainid"
						" from train as a,train as b"
						" where a.Starttime>'%1' and a.Starttime<'%2'"
						" and a.trainid=b.trainid and a.origin like '%3%' and b.destination like '%4%' "
						" order by a.starttime asc").arg(t.StartTime).arg(t.EndTime).arg(t.Origin).arg(t.Destination);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	QSqlRecord rec=query.record();
	while(query.next())
	{
		result.append(query.value(0).toString());
	}
	return result;
}
int MyDataBase::aux_getSeatNum(Train t)
{
	QString p;
	QSqlQuery query(db);
	if (t.TrainId=="0")//这就查不了了。
	{
		emit newdebug("getSeatNum error!");
		return -1;
	}
	int type=t.carType;
	if (type==-1)//type还是空的。
	{
		type=aux_getType(t);
	}

	int seatnum=0;
	p=QString("select seatnum from cartype where cartype = %1").arg(type);
		query.prepare(p);//查询train里的条目数
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		seatnum=query.value(0).toInt();
	return seatnum;

}
int MyDataBase::aux_getType(Train t)
{
	if (t.TrainId=="0")
	{
		emit newdebug("getType error!");
		return -1;
	}
	int type=0;
	QSqlQuery query(db);
	QString p=QString("select distinct cartype from train where trainid = '%1'").arg(t.TrainId);
	query.prepare(p);//查询train里的条目数
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		type=query.value(0).toInt();//获取type
	return type;
}
int MyDataBase::aux_getItemNumber(QString table)
{
	/*获取条目数方法1*/
	//query.last();int num=query.at()+1;
	//query.first();query.previous();
	//emit newdebug(QString("%1").arg(num));
	//emit newdebug(QString("%1,%2").arg(query.numRowsAffected()).arg(query.size()));//这个没用，不支持。
	int itemNum=0;
	QSqlQuery query(db);
	QString p=QString("select count(*) from %1").arg(table);
	query.prepare(p);//查询train里的条目数
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		itemNum=query.value(0).toInt();
	return itemNum;
}
int MyDataBase::aux_getOriginStationId(Ticket t)
{
	int stationId=0;
	QSqlQuery query(db);
	if (t.TrainId==""|| t.StartTime=="")
	{
		emit newdebug("getOriginStation error!");
		return -1;
	}
	//QString date=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("yyyy/MM/dd");
	QString p=QString(	"select distinct a.StationId"
						" from train as a"
						" where a.TrainId='%1' and a.origin='%2'").arg(t.TrainId).arg(t.Origin);
	//emit newdebug(p);
	query.prepare(p);//查询购买此车的人的票
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		stationId=query.value(0).toInt();//获取stationid
	return stationId;
}
int MyDataBase::aux_getDestinationStationId(Ticket t)
{
	int stationId;
	QSqlQuery query(db);
	if (t.TrainId==""|| t.StartTime=="")
	{
		emit newdebug("getDestinationStation error!");
		return -1;
	}
	//QString date=QDateTime::fromString(t.StartTime,"yyyy/MM/dd hh:mm").toString("yyyy/MM/dd");
	QString p=QString(	"select distinct a.StationId"
						" from train as a"
						" where a.TrainId='%1' and a.destination='%2'").arg(t.TrainId).arg(t.Destination);
	//emit newdebug(p);
	query.prepare(p);//查询购买此车的人的票
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while (query.next())
		stationId=query.value(0).toInt();//获取type
	return stationId;
}
QStringList MyDataBase::aux_getTrainTicketInfo(Train t)
{
	QStringList result;result.clear();
	QSqlQuery query(db);
	QString temp=QString("select distinct a.trainid"
						" from train as a,train as b"
						" where a.Starttime>'%1' and a.Starttime<'%2'"
						" and a.trainid=b.trainid and a.origin like '%3%' and b.destination like '%4%' "
						" order by a.starttime asc").arg(t.StartTime).arg(t.EndTime).arg(t.Origin).arg(t.Destination);
	//emit newdebug(temp);
	query.prepare(temp);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	QSqlRecord rec=query.record();
	while(query.next())
	{
		result.append(query.value(0).toString());
	}
	return result;
}
void MyDataBase::aux_addTrain(const Train& t)
{
	QSqlQuery query(db);
	QString p=QString("INSERT INTO train "
					" (trainid,starttime,endtime,origin,destination,cartype,length,stationid)"
					" SELECT '%1', '%2', '%3','%4','%5',%6,%7,%8"
					" WHERE not exists (select trainid,starttime from train where trainid='%1' and starttime='%2')")
					.arg(t.TrainId).arg(t.StartTime).arg(t.EndTime)
					.arg(t.Origin).arg(t.Destination).arg(t.carType).arg(t.length).arg(t.StationId);
	query.prepare(p);
	if (!query.exec())
	{
		emit newdebug("add train error!");
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
	}
}
double MyDataBase::aux_getCurrentMoney(UserClass u)
{
	double money=0;
	QSqlQuery query(db);
	QString content=QString("select money from account WHERE UserId='%1'").arg(u.UserId);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	QSqlRecord rec=query.record();
	if (!query.next())//没找到，xaccount
		return -1;
	query.previous();
	while(query.next())
		money=query.value(0).toDouble();
	return money;
}
double MyDataBase::aux_getPrice(Ticket t)
{
	QSqlQuery query(db);
	double price=0;
	if (t.UserId=="0" || t.StartTime=="0")
	{
		emit newdebug("aux_getprice error!");
		return -1;
	}
	QString content=QString("select price"
							" from ticket"
							" where userid='%1' and starttime='%2' and trainid='%3'")
							.arg(t.UserId).arg(t.StartTime).arg(t.TrainId);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		price=query.value(0).toDouble();
	return price;
}
int MyDataBase::addUserMoney(double money,QString userid)
{
	QSqlQuery query(db);
	QString content=QString("update account"
							" set money=money+%1"
							" where userid='%2'").arg(money).arg(userid);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	return 1;
}
QString MyDataBase::aux_getOriginTime(Train t)
{
	QSqlQuery query(db);
	QString starttime;
	if (t.TrainId=="0" || t.StartTime=="0")
	{
		emit newdebug("aux_getorigin error!");
		return -1;
	}
	QString content=QString("select max(starttime) "
							" from train as a"
							" where a.TrainId='%1' and a.starttime<='%2' and stationid=0")
							.arg(t.TrainId).arg(t.StartTime);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		starttime=query.value(0).toString();
	return starttime;
}
QString MyDataBase::aux_getEndTime(Train t)
{
	QSqlQuery query(db);
	QString endtime;
	if (t.TrainId=="0" || t.StartTime=="0")
	{
		emit newdebug("aux_getend error!");
		return -1;
	}
	QString content=QString("select min(endtime)"
							" from train as a"
							" where a.TrainId='%1' and a.StartTime>='%2' and stationid="
							" (select MAX(StationId) from Train where TrainId=a.TrainId)")
							.arg(t.TrainId).arg(t.StartTime);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		endtime=query.value(0).toString();
	return endtime;
}
QString MyDataBase::aux_getEndTime(Ticket t)
{
	QSqlQuery query(db);
	QString endtime;
	if (t.TrainId=="0" || t.StartTime=="0"|| t.Destination=="0")
	{
		emit newdebug("aux_getendtime ticket error!");
		return -1;
	}
	QString content=QString("select min(endtime)"
							" from train"
							" where TrainId='%1' and StartTime>='%2' and destination='%3'")
							.arg(t.TrainId).arg(t.StartTime).arg(t.Destination);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		endtime=query.value(0).toString();
	return endtime;
}
double MyDataBase::aux_getTrainPrice(const Train& t)
{
	QSqlQuery query(db);
	double price;
	int length;
	double pricePerKm;
	if (t.TrainId=="0" || t.StartTime=="0")
	{
		emit newdebug("aux_gettrainprice error!");
		return -1;
	}
	QString content=QString("select sum(distinct a.Length)"
							" from train as a"
							" where a.StationId>=%1 and a.StationId<=%2 and a.TrainId='%3'")
							.arg(t.originStationId).arg(t.endStationId).arg(t.TrainId);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		length=query.value(0).toInt();//计算总长

	content= QString("select PricePerKm from cartype where cartype= %1").arg(t.carType);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return -1;
	}
	while(query.next())
		pricePerKm=query.value(0).toDouble();//计算总长
	price=pricePerKm*length;
	//emit newdebug(QString("%1:%2").arg(pricePerKm).arg(length));
	return price;
}
QList<Train> MyDataBase::aux_getRegularTrain()
{
	QSqlQuery query(db);
	Train target;
	QList<Train> result;
	QString content=QString("select * from regulartrain");
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return result;
	}
	QSqlRecord rec=query.record();
	while(query.next())
	{
		for (int i=0;i<rec.count();i++)
		{
			if (i==0) target.TrainId=query.value(i).toString();
			if (i==1) target.StartTime=query.value(i).toString();
			if (i==2) target.EndTime=query.value(i).toString();
			if (i==3)  target.Origin=query.value(i).toString();
			if (i==4) target.Destination=query.value(i).toString();
			if (i==5) target.carType=query.value(i).toInt();
			if (i==6) target.length=query.value(i).toInt();
			if (i==7) target.StationId=query.value(i).toInt();
		}
		result.append(target);
	}
	return result;
}
bool MyDataBase::aux_IsExists(QString table,QString TrainId,QString Starttime)
{
	QSqlQuery query(db);
	QString content=QString("select * from %1 where trainid='%2' and starttime='%3'")
		.arg(table).arg(TrainId).arg(Starttime);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		emit newdebug("isExists error!");
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return false;
	}
	if (query.next())
		return true;
	else
	{
		return false;
	}
}
int MyDataBase::aux_updateTrainInfo(QString table,Train t)
{
	QSqlQuery query(db);
	QString content=QString("update %9"
							" set endtime='%3',origin='%4',destination='%5',cartype=%6,"
							" length=%7, stationid=%8"
							" where trainid='%1' and starttime='%2'").arg(t.TrainId).arg(t.StartTime)
							.arg(t.EndTime).arg(t.Origin).arg(t.Destination).arg(t.carType).arg(t.length)
							.arg(t.StationId).arg(table);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	return 1;
}
int MyDataBase::aux_deleteTrain(QString table, Train t)
{
	QSqlQuery query(db);
	QString content=QString("delete from %1 where Trainid='%2' and starttime= '%3'").arg(table).arg(t.TrainId)
		.arg(t.StartTime);
	//emit newdebug(content);
	query.prepare(content);
	if (!query.exec())
	{
		QSqlError lastError=query.lastError();
		emit newdebug(lastError.text());
		return 0;
	}
	return 1;
}
#include "mainwindow.h"
#include "addText.h"
#include <Qstring>
#include <Qmap>
#include "userinfo.h"
#include "user.h"
#include <QDatetime>
#include <Qmessagebox>
#include <QAbstractItemView>
#include <qspinbox>
#include <cstdlib>
#include <ctime>
QMap<QString,QString> loginMap;//记录用户登录时间
QMap<QString,QString> logoutMap;//记录用户登出时间
void sleep(unsigned int msec) 
{ 
	QTime dieTime = QTime::currentTime().addMSecs(msec); 
	while( QTime::currentTime() < dieTime ) 
	QCoreApplication::processEvents(QEventLoop::AllEvents, 100); 
}
mainwindow::mainwindow(int port,QString databaseAd,QWidget *parent)
	: QWidget(parent)
{
	ui.setupUi(this);
	/*setting tables*/
	ui.LogTableWidget->setWindowTitle("Railway Server developer log");
	QStringList header;header<<"Log information"<<"Time";
	ui.LogTableWidget->setHorizontalHeaderLabels(header);
	ui.LogTableWidget->setColumnWidth(0,180);
	ui.LogTableWidget->setColumnWidth(1,80);
	ui.LogTableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);
	ui.userTableWidget->setWindowTitle("Clients' information");
	QStringList header2;header2<<"UserId"<<"identity"<<"descriptor";
	ui.userTableWidget->setHorizontalHeaderLabels(header2);
	ui.userTableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);
	ui.userTableWidget->setSelectionMode(QAbstractItemView::ExtendedSelection);//设为多选
	ui.UserInfoButton->setEnabled(false);
	ui.deleteButton->setEnabled(false);
	ui.sendButton->setEnabled(false);

	/*setting signals and slots*/
	connect(&server,SIGNAL(newdebug(const QString&)),this,SLOT(Mydebug(const QString&)));
	connect(&server,SIGNAL(newUser(QString,QString)),&database,SLOT(checkNewUser(QString,QString)));
	connect(&server,SIGNAL(update()),this,SLOT(updateCurrentUser()));
	connect(&server,SIGNAL(newRegister(QString,QString,QString,QString,QString,QString,QString,QString,QString)),
		&database,SLOT(registerNewUser(QString,QString,QString,QString,QString,QString,QString,QString,QString)));//傻逼程序233
	connect(&server,SIGNAL(ticketQuery(QString)),&database,SLOT(onTicketQuery(QString)));
	connect(&server,SIGNAL(trainQuery(Train)),&database,SLOT(onTrainQuery(Train)));
	connect(&server,SIGNAL(returnTicket(Ticket)),&database,SLOT(onTicketReturn(Ticket)));
	connect(&server,SIGNAL(MidStationQuery(Train)),&database,SLOT(onMidStationQuery(Train)));
	connect(&server,SIGNAL(userAddMoney(UserClass)),&database,SLOT(onUserAddMoney(UserClass)));
	connect(&server,SIGNAL(updateUserInfo(UserClass)),&database,SLOT(onUserUpdateInfo(UserClass)));
	connect(&server,SIGNAL(buyTicket(Ticket)),&database,SLOT(onBuyTicket(Ticket)));
	connect(&server,SIGNAL(updateAdminInfo(admin)),&database,SLOT(onUpdateAdminInfo(admin)));
	connect(&server,SIGNAL(addTrainInfo(Train)),&database,SLOT(onAddTrainInfo(Train)));
	connect(&server,SIGNAL(updateTrainInfo(Train)),&database,SLOT(onUpdateTrainInfo(Train)));
	connect(&server,SIGNAL(userLogOut(QString)),this,SLOT(onUserLogOut(QString)));
	connect(&server,SIGNAL(deleteTrain(Train)),&database,SLOT(onDeleteTrain(Train)));
	connect(&database,SIGNAL(deleteTrainResult(int)),this,SLOT(onDeleteTrainResult(int)));
	connect(&database,SIGNAL(trainUpdateResult(int)),this,SLOT(onTrainUpdateResult(int)));
	connect(&database,SIGNAL(addTrainResult(int)),this,SLOT(onAddTrainResult(int)));
	connect(&database,SIGNAL(adminUpdateInfoResult(int)),this,SLOT(onAdminUpdateInfoResult(int)));
	connect(&database,SIGNAL(buyTicketResult(int)),this,SLOT(onBuyTicketResult(int)));
	connect(&database,SIGNAL(userUpdateInfoResult(int)),this,SLOT(onUserUpdateInfoResult(int)));
	connect(&database,SIGNAL(userAddMoneyResult(int)),this,SLOT(onUserAddMoneyResult(int)));
	connect(&database,SIGNAL(returndeleteResult(int)),this,SLOT(onReturnDeleteResult(int)));
	connect(&database,SIGNAL(registerUser(int)),this,SLOT(onRegisterUser(int)));
	connect(&database,SIGNAL(newUser(int,QString,int,QStringList)),this,SLOT(onNewUser(int,QString,int,QStringLi+st)));
	connect(&database,SIGNAL(newdebug(const QString&)),this,SLOT(Mydebug(const QString&)));
	connect(&database,SIGNAL(userTicketInfo(QStringList)),this,SLOT(onTicketInfo(QStringList)));
	connect(&database,SIGNAL(trainInfo(QStringList)),this,SLOT(onTrainInfo(QStringList)));
	connect(&database,SIGNAL(midStationInfo(QStringList)),this,SLOT(onMidStationInfo(QStringList)));

	connect(this,SIGNAL(serverWrite(QString)),&server,SLOT(Write(QString)));
	connect(this,SIGNAL(serverWrite(QString,int)),&server,SLOT(Write(QString,int)));
	connect(ui.sendButton,SIGNAL(clicked()),this,SLOT(onSendClicked()));
	connect(ui.UserInfoButton,SIGNAL(clicked()),this,SLOT(onInfoClicked()));
	connect(ui.deleteButton,SIGNAL(clicked()),this,SLOT(onDeleteClicked()));

	server.listen(QHostAddress::Any,port);
	Mydebug("Server Listenning!");
	if(database.createConnection(databaseAd))
	{
		Mydebug("database link success!");
		if(database.createTables())
			Mydebug("database set up success!");
		QDateTime time = QDateTime::currentDateTime();
		database.date=time.toString("yyyy/MM/dd");
		database.deleteTrain(time.toString("yyyy/MM/dd hh:mm"));
		database.deleteTicket(time.toString("yyyy/MM/dd hh:mm"));
		database.addTrain(time.toString("yyyy-MM-dd"));
	}
	srand((unsigned)time(0));
}

//窗口输出日志信息
void mainwindow::Mydebug(const QString& str)
{
	static int i=0;//行数
	QDateTime time = QDateTime::currentDateTime();//获取系统现在的时间
	QString temp = time.toString("h:m:s"); //设置显示格式
	qDebug()<<str;
	ui.LogTableWidget->setItem(i,0,new QTableWidgetItem(str));
	ui.LogTableWidget->setItem(i,1,new QTableWidgetItem(temp));
	++i;
	if (i==ui.LogTableWidget->rowCount()-1)//如果满了，清空重新来
	{
		i=0;
		ui.LogTableWidget->clear();
	}
}

//slots
void mainwindow::onDeleteClicked()
{
	QList<int> descriptors;
	QList<QTcpSocket *> targets;
	QList<QTcpSocket *>::iterator iter;

	/*get item*/
	QList<QTableWidgetItem *>items=ui.userTableWidget->selectedItems();
	if (!items.count())
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("没有选择用户！"));
		msgBox.exec();
		Mydebug("iten not selected!");
		return ;
	}
	for (int i=0;i<items.count();i++)
	{
		int row=ui.userTableWidget->row(items.at(i));
		QTableWidgetItem *item=ui.userTableWidget->item(row,2);
		descriptors.append(item->text().toInt());
	}

	bool flag=true;//find or not
	
	if (flag)
	{
		QString message=QString("Disconnected");
		//Mydebug(message);
		for (int i=0;i<descriptors.count();i++)
		{
			emit serverWrite(message,descriptors.at(i));
			//Mydebug(QString("%1-").arg(descriptors.at(i)));
		}
	}
	else
		Mydebug("error! decriptor not found!");
}
void mainwindow::onInfoClicked()
{
	QString user;
	QList<QTcpSocket *> targets;
	QList<QTcpSocket *>::iterator iter;
	int flag=0;
	/*get item*/
	QList<QTableWidgetItem *>items=ui.userTableWidget->selectedItems();
	if (!items.count())
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("没有选择用户！"));
		msgBox.exec();
		Mydebug("iten not selected!");
		return ;
	}
	if (items.count()>1)
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("查看用户信息时请选择单个用户！"));
		msgBox.exec();
		Mydebug("too much items selected!");
		return ;
	}
	int row=ui.userTableWidget->row(items.at(0));
	if (ui.userTableWidget->item(row,1)->text().contains(QStringLiteral("管理")))
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("管理员的信息不可以查看！请去公司总部查看人员册！"));
		msgBox.exec();
		Mydebug("cannot look up ad's info!");
		return ;
	}
	QTableWidgetItem *item=ui.userTableWidget->item(row,0);
	if (!item)
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("没有选择合适用户！"));
		msgBox.exec();
		Mydebug("no proper user selected");
		return ;
	}
	if (item->backgroundColor()==QColor(252,222,156))
		flag=2;
	else
	{
		flag=1;
	}
	user=item->text();
	if (flag)
	{
		QStringList temp=database.queryInfo("USER",user);
		temp.removeLast();
		if (!loginMap.contains(user))
			Mydebug("no user log in record!");

		else
		{
			if (flag==2)//不在线
			{
				temp.append(loginMap[user]);
				temp.append(logoutMap[user]);
			}
			if (flag==1)//在线
			{
				temp.append(loginMap[user]);
				temp.append(QStringLiteral("当前在线"));
			}
		}
		UserInfo w(temp);
		w.exec();
	}
	else
		Mydebug("error! decriptor not found!");
}
void mainwindow::onSendClicked()
{
	QList<int> descriptors;
	QList<QTcpSocket *> targets;
	QList<QTcpSocket *>::iterator iter;

	/*get item*/
	QList<QTableWidgetItem *>items=ui.userTableWidget->selectedItems();
	if (!items.count())
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("没有选择用户！"));
		msgBox.exec();
		Mydebug("iten not selected!");
		return ;
	}
	for (int i=0;i<items.count();i++)
	{
		int row=ui.userTableWidget->row(items.at(i));
		QTableWidgetItem *item=ui.userTableWidget->item(row,2);
		descriptors.append(item->text().toInt());
	}

	bool flag=true;//find or not
	
	if (flag)
	{
		addText w;
		if (w.exec()==QDialog::Accepted)
		{
			QString message=w.getText();
			//Mydebug(QString("%1").arg(message.length()));
			//Mydebug(message);
			for (int i=0;i<descriptors.count();i++)
			{
				emit serverWrite(message,descriptors.at(i));
				//Mydebug(QString("%1-").arg(descriptors.at(i)));
			}
		}
	}
	else
		Mydebug("error! decriptor not found!");
}
void mainwindow::updateCurrentUser()
{
	//Mydebug("updateCurrentUser running");
	QList<int> _descriptors;
	int temp;
	_descriptors.clear();
	for (int i=0;i<server._clients.count();++i)
		_descriptors.append((int)server._clients.at(i)->socketDescriptor());
	//setting usertable
	for (int i=0;i<getRow(ui.userTableWidget);i++)
	{
		//Mydebug(QString("%1").arg(i));
		temp=ui.userTableWidget->item(i,2)->text().toInt();
		if (!_descriptors.contains(temp)
			&& ui.userTableWidget->item(i,2)->backgroundColor()!=QColor(252,222,156))
		{
			//add something;
			QDateTime time = QDateTime::currentDateTime();//获取系统现在的时间
			QString temp = time.toString("h:m:s"); //设置显示格式
			logoutMap[ui.userTableWidget->item(i,0)->text()]=temp;//设置登出时间到内存
			for(int j=0;j<ui.userTableWidget->columnCount();j++)
			{
				QTableWidgetItem *item=ui.userTableWidget->item(i,j);
				if (item)//如果非空
				{
					const QColor color = QColor(252,222,156);
					item->setBackgroundColor(color);
				}
			}
		}
	}
}
void mainwindow::onNewUser(int flag,QString name,int id,QStringList info)
{
	if (flag==2)//success
	{
		/*判断用户是否已经登录*/
		if (IsLogin(name))
		{
			emit serverWrite("user Already login in !");
			return ;
		}

		/*update mainwindow*/
		addUserInfo(server.currentSocket->socketDescriptor());
		addUserInfo(name,id,server.currentSocket->socketDescriptor());
		ui.UserInfoButton->setEnabled(true);
		ui.deleteButton->setEnabled(true);
		ui.sendButton->setEnabled(true);
		QDateTime time = QDateTime::currentDateTime();//获取系统现在的时间
	    QString temp = time.toString("h:m:s"); //设置显示格式
		loginMap[name]=temp;
		QString str=info.join("-");
		if (id==User)
			emit serverWrite("success-User;"+str);
		else if (id==Admin)
			emit serverWrite("success-Administrator;"+str);
		Mydebug("a client has login!");
	}
	else if (flag==1)//xuser
	{
		emit serverWrite("xuser");
	}
	else if (flag==0)//xpasswd
		emit serverWrite("xpasswd");
	else//程序错乱.
	{
		Mydebug("ERRRRRRRRRRRRRRROR!");
		emit serverWrite("server unexpected error!");
	}
}
void mainwindow::onRegisterUser(int flag)
{
	if (flag==2)
	{
		emit serverWrite("success");
	}
	else if (flag==1)
	{
		emit serverWrite("xusername");
	}
	else if (flag==0)
	{
		emit serverWrite("xID");
	}
	else
	{
		emit serverWrite("server unexpected error!");
	}
}
void mainwindow::onTicketInfo(QStringList info)
{
	QString temp=info.join("-");
	emit serverWrite(temp);
}
void mainwindow::onTrainInfo(QStringList info)
{
	QString temp=info.join("-");
	emit serverWrite(temp);
}
void mainwindow::onReturnDeleteResult(int flag)
{
	if (flag==1)//删除成功
	{
		emit serverWrite("success");
		return;
	}
	else if(flag==0)//没有
	{
		emit serverWrite("xticket");
		return;
	}
	else//多删orsql崩了
	{
		emit serverWrite("unexpected error!");
		return ;
	}

}
void mainwindow::onMidStationInfo(QStringList info)
{
	QString temp=info.join("-");
	emit serverWrite(temp);
}
void mainwindow::onUserAddMoneyResult(int flag)
{
	if (flag==1)//success
	{
		emit serverWrite("success");
	}
	else if(flag==-1)
	{
		emit serverWrite("server sql error!");
	}
	else
	{
		emit serverWrite("unexpected error!");
	}
	
}
void mainwindow::onUserUpdateInfoResult(int flag)
{
	if(flag==1)//success
	{
		emit serverWrite("success");
	}
	else
	{
		emit serverWrite("unexpected error!");
	}
}
void mainwindow::onBuyTicketResult(int flag)
{
	if (flag==1)
		emit serverWrite("success");
	else
	{
		emit serverWrite("server unexpected error!");
	}
}
void mainwindow::onAdminUpdateInfoResult(int flag)
{
	if (flag)
	{
		emit serverWrite("success");
	}
	else
	{
		emit serverWrite("unexpected error");
	}

}
void mainwindow::onAddTrainResult(int flag)
{
	if (flag==1)//成功
	{
		emit serverWrite("success");
	}
	else if(flag==0)//exists
	{
		emit serverWrite("exists");
	}
	else
	{
		emit serverWrite("server unexpected error");
	}
}
void mainwindow::onTrainUpdateResult(int flag)
{
	if (flag==1)
	{
		emit serverWrite("success");
	}
	else if (flag==0)
	{
		emit serverWrite("success but xpermanent");
	}
	else
	{
		emit serverWrite("unexpected error");
	}
}
void mainwindow::onUserLogOut(QString UserId)
{
	QString currentUserId;
	bool flag=false;
	for (int i=0;i<getRow(ui.userTableWidget);i++)
	{
		//Mydebug(QString("%1").arg(i));
		currentUserId=ui.userTableWidget->item(i,0)->text();
		if (currentUserId==UserId
			&& ui.userTableWidget->item(i,2)->backgroundColor()!=QColor(252,222,156))
		{
			flag=true;
			//add something;
			QDateTime time = QDateTime::currentDateTime();//获取系统现在的时间
			QString temp = time.toString("h:m:s"); //设置显示格式
			logoutMap[currentUserId]=temp;//设置登出时间到内存
			for(int j=0;j<ui.userTableWidget->columnCount();j++)
			{
				QTableWidgetItem *item=ui.userTableWidget->item(i,j);
				if (item)//如果非空
				{
					const QColor color = QColor(252,222,156);
					item->setBackgroundColor(color);
				}
			}
		}
	}
	if (flag)
		emit serverWrite("success");
	else
	{
		emit serverWrite("xuser!");
	}
}
void mainwindow::onDeleteTrainResult(int flag)
{
	if (flag==1)
	{
		emit serverWrite("success");
	}
	else if (flag==0)
	{
		emit serverWrite("success but xpermanent");
	}
	else
	{
		emit serverWrite("unexpected error");
	}
}

//aux_fuctions
void mainwindow::addUserInfo(QString user,int identity,int _d)//"0"不修改
{
	if (user!="0") 
		ui.userTableWidget->setItem(getRow(ui.userTableWidget,_d),0,new QTableWidgetItem(user));
	if (identity!=0)
	{
		if (identity==Admin)//管理员
		{
			int row=getRow(ui.userTableWidget,_d);
			if (row==-1) 
			{
				Mydebug("error!descriptor not found");
				return;
			}
			ui.userTableWidget->setItem(row,1,new QTableWidgetItem(QStringLiteral("管理员")));
		}
		else if (identity==User)//用户
		{
			int row=getRow(ui.userTableWidget,_d);
			if (row==-1) 
			{
				Mydebug("error!descriptor not found");
				return;
			}
			ui.userTableWidget->setItem(row,1,new QTableWidgetItem(QString::fromLocal8Bit("用户")));
		}
		else 
			Mydebug("error!Wrong Identity");
	}
}
void mainwindow::addUserInfo(int _d)
{
	int row=getRow(ui.userTableWidget);
	//Mydebug(QString("%1").arg(row));
	if(row==-1)
	{
		Mydebug("error!List full!");
		return ;
	}
	ui.userTableWidget->setItem(row,2,new QTableWidgetItem(QString("%1").arg(_d)));
}
int mainwindow::getRow(QTableWidget * rs,int _d)//找到制定descritor所在地
{
	for (int j=0;j<rs->rowCount();j++)
	{
		QTableWidgetItem *item=rs->item(j,2);//2是descriptor
		if (!item)
		{
			Mydebug("error!");
			return 0;
		}
		if (item->text().toInt()==_d && item->backgroundColor()!=QColor(252,222,156))
			return j;
	}
	return -1;
}
int mainwindow::getRow(QTableWidget *rs)//get row with no descriptor
{
	for (int j=0;j<rs->rowCount();j++)
	{
		QTableWidgetItem *item=rs->item(j,2);//2是descriptor
		if (!item)
			return j;
	}
	return -1;
}
bool mainwindow::IsLogin(const QString& UserId)
{
	for (int j=0;j<ui.userTableWidget->rowCount();j++)
	{
		QTableWidgetItem *item=ui.userTableWidget->item(j,0);//2是descriptor
		if (!item)
		{
			return false;
		}
		if (item->text()==UserId && item->backgroundColor()!=QColor(252,222,156))
			return true;
	}
	return false;
}

mainwindow::~mainwindow()
{

}
#include "addtext.h"

addText::addText(QWidget *parent)
	: QDialog(parent)
{
	ui.setupUi(this);
}
QString addText::getText()
{
	return ui.lineEdit->text().trimmed();
}
addText::~addText()
{

}
#include "railway.h"

#include <QtWidgets/QApplication>
int main(int argc, char *argv[])
{
	QApplication a(argc, argv);
	Railway w;
	w.show();

	return a.exec();
}
#include "mytcpserver.h"
#include "train.h"
#include <QTcpsocket>
#include <QTextCodec>
#include <QByteArray>
#include <Qqueue>
#include <QString>
#include <QStringList>
QQueue<QTcpSocket*> q;
MyTcpServer::MyTcpServer(QObject *parent)
	: QTcpServer(parent)
{
	resetStatus();
	connect(this,SIGNAL(newConnection()),this,SLOT(onNewConnection()));
}
void MyTcpServer::onNewConnection()
{
	QTcpSocket *client=nextPendingConnection();
	emit newdebug(QString("accept connection from %1").arg(client->socketDescriptor()));
	//client->write("LinkSuccess");
	connect(client,SIGNAL(readyRead()),this,SLOT(readClient()));
	connect(client,SIGNAL(disconnected()),this,SLOT(clientDisconnected()));
	_clients.append(client);

}
void MyTcpServer::Write(QString str)
{
	QByteArray a=str.toUtf8();
	if (q.isEmpty())
	{
		emit newdebug("no descriptor to send info!");
		return ;
	}
	//int d=q.takeFirst();
	//for (int i=0;i<_clients.count();i++)
	//{
	//	if (_clients.at(i)->socketDescriptor()==d)
	//	{
	//		QByteArray a=str.toUtf8();
	//		emit newdebug(QString("send %1 to %2").arg(str).arg(_clients.at(i)->socketDescriptor()));
	//		_clients.at(i)->write(a);
	//		return ;
	//	}
	//}
	QTcpSocket *target=q.takeFirst();
	if (!_clients.contains(target))
	{
		emit newdebug("user missing!");
		return;
	}
	target->write(a);
	emit newdebug(QString("send %1 to %2").arg(str).arg(target->socketDescriptor()));
}
void MyTcpServer::Write(QString str,int _d)
{
	//emit newdebug("Write2 running");
	for (int i=0;i<_clients.count();i++)
	{
		if (_clients.at(i)->socketDescriptor()==_d)
		{
			QByteArray a=str.toUtf8();
			emit newdebug(QString("send %1 to %2").arg(str).arg(_clients.at(i)->socketDescriptor()));
			_clients.at(i)->write(a);
			return ;
		}
	}
	emit newdebug("descriptor not found!");
}
void MyTcpServer::readClient()
{
	QTcpSocket *target=(QTcpSocket *)sender();
	QByteArray temp=target->readAll();
	QTextCodec *tc = QTextCodec::codecForName("UTF-8");
	QString str = tc->toUnicode(temp);

	emit newdebug(QString("%1: %2").arg((int)target->socketDescriptor()).arg(str));//收到信息
	
	if (str.contains("login")) IsLogin=true;
	if (str.contains("register")) IsRegister=true;
	if (str.contains("ticketbought")) IsTicketBought=true;
	if (str.contains("searchtrain")) IsSearchTrain=true;
	if (str.contains("returnticket")) IsReturn=true;
	if (str.contains("midstation")) IsMidQuery=true;
	if (str.contains("pay")) IsPay=true;
	if (str.contains("updateinfo")) IsUpdateInfo=true;
	if (str.contains("buyticket")) IsBuyTicket=true;
	if (str.contains("updateadmininfo")) IsUpdateAdmininfo=true;
	if (str.contains("updatetraininfo")) IsUpdateTrainInfo=true;
	if (str.contains("addtrain")) IsAddTrainInfo=true;
	if (str.contains("logout")) IsUserLogOut=true;
	if (str.contains("seatbought")) IsSeatBought=true;
	if (str.contains("deletetrain")) IsDeleteTrain=true;
	if (str.contains("-")) 
	{
		currentSocket=target;
		if (IsLogin)//login
		{
			emit newdebug("login");
			QStringList parts=str.split("-");
			QString name=parts[0].trimmed();
			QString password=parts[1].trimmed();
			//emit newdebug(QString("%1,%2").arg(name).arg(password));
			q.append(target);
			emit newUser(name,password);
			resetStatus();
			return ;
		}
		if(IsRegister)//注册
		{
			emit newdebug("register");
			QStringList parts=str.split("-");
			QString UserId=parts[0].trimmed();
			QString PassWord=parts[1].trimmed();
			QString name=parts[2].trimmed();
			QString sex=parts[3].trimmed();
			QString nation=parts[4].trimmed();
			QString credencial=parts[5].trimmed();
			QString contact=parts[6].trimmed();
			QString identity=parts[7].trimmed();
			QString addition=parts[8].trimmed();
			q.append(target);
			emit newRegister(UserId,PassWord,name,sex,nation,credencial,contact,identity,addition);
			resetStatus();
			return;
		}
		if (IsTicketBought)//查看买票信息。
		{
			emit newdebug("ticketbought");
			QString UserId=str.split("-")[1].trimmed();
			//emit newdebug(UserId);
			q.append(target);
			emit ticketQuery(UserId);
			resetStatus();
			return;
		}
		if (IsSearchTrain)//查询车次。
		{
			emit newdebug("querycar");
			QStringList parts=str.split("-");
			Train temp;
			temp.Origin=parts[0].trimmed();
			temp.Destination=parts[1].trimmed();
			temp.StartTime=parts[2].trimmed();
			temp.EndTime=parts[3].trimmed();
			q.append(target);
			emit trainQuery(temp);
			resetStatus();
			return ;
		}
		if (IsReturn)//退票
		{
			emit newdebug("returnticket");
			QStringList parts=str.split("-");
			Ticket temp;
			temp.UserId=parts[0].trimmed();
			temp.TrainId=parts[1].trimmed();
			temp.StartTime=parts[2].trimmed();
			q.append(target);
			emit returnTicket(temp);
			resetStatus();
			return ;
		}
		if (IsMidQuery)//中间站查询
		{
			emit newdebug("midstationquery");
			QStringList parts=str.split("-");
			Train t;
			t.TrainId=parts[1].trimmed();
			t.StartTime=parts[2].trimmed();
			q.append(target);
			emit MidStationQuery(t);
			resetStatus();
			return ;
		}
		if (IsPay)//充值
		{
			emit newdebug("pay");
			QStringList parts=str.split("-");
			UserClass u;
			u.UserId=parts[1].trimmed();
			u.addmoney=parts[2].trimmed().toDouble();
			q.append(target);
			//emit newdebug(QString("%1:%2").arg(u.UserId).arg(u.addmoney));
			emit userAddMoney(u);
			resetStatus();
			return ;
		}
		if (IsUpdateInfo)//updateInfo
		{
			emit newdebug("updateuserinfo");
			QStringList parts=str.split("-");
			UserClass u;
			u.UserId=parts[0].trimmed();
			u.password=parts[1].trimmed();
			u.name=parts[2].trimmed();
			if (parts[3].trimmed().contains("Ma"))
				u.sex=1;
			if (parts[3].trimmed().contains("Fe"))
				u.sex=2;
			u.nation=parts[4].trimmed();
			u.credentials=parts[5].trimmed();
			u.contact=parts[6].trimmed();
			u.identity=parts[7].trimmed();
			q.append(target);
			emit updateUserInfo(u);
			resetStatus();
			return ;
		}
		if (IsBuyTicket)//buyticket
		{
			emit newdebug("buy ticket");
			QStringList parts=str.split("-");
			Ticket t;
			t.UserId=parts[0].trimmed();
			t.TrainId=parts[1].trimmed();
			t.StartTime=parts[2].trimmed();
			t.Origin=parts[3].trimmed();
			t.Destination=parts[4].trimmed();
			t.Seat=parts[5].trimmed().toInt();
			t.Tickettype=parts[6].trimmed().toInt();
			//emit newdebug(QString("%1").arg(t.Tickettype));
			t.price=parts[7].trimmed().toDouble();
			q.append(target);
			emit buyTicket(t);
			resetStatus();
			return ;
		}
		if(IsUpdateAdmininfo)
		{
			emit newdebug("update admininfo");
			QStringList parts=str.split("-");
			admin a;
			a.userid=parts[0].trimmed();
			a.password=parts[1].trimmed();
			a.name=parts[2].trimmed();
			a.contact=parts[3].trimmed();
			a.position=parts[4].trimmed();
			q.append(target);
			emit updateAdminInfo(a);
			resetStatus();
			return ;
		}
		if (IsAddTrainInfo)//添加列车
		{
			QStringList parts=str.split("-");
			Train traintarget;
			traintarget.TrainId=parts[1].trimmed();
			traintarget.StartTime=parts[2].trimmed();
			traintarget.EndTime=parts[3].trimmed();
			traintarget.Origin=parts[4].trimmed();
			traintarget.Destination=parts[5].trimmed();
			traintarget.carType=parts[6].trimmed().toInt();
			traintarget.length=parts[7].trimmed().toInt();
			traintarget.StationId=parts[8].trimmed().toInt();
			traintarget.addType=parts[9].trimmed().toInt();
			traintarget.addDays=parts[10].trimmed().toInt();
			q.append(target);
			emit addTrainInfo(traintarget);
			resetStatus();
			return ;
		}
		if (IsUpdateTrainInfo)//修改列车
		{
			QStringList parts=str.split("-");
			emit newdebug("update train info");
			Train t;
			t.TrainId=parts[1].trimmed();
			t.StartTime=parts[2].trimmed();
			t.EndTime=parts[3].trimmed();
			t.Origin=parts[4].trimmed();
			t.Destination=parts[5].trimmed();
			t.carType=parts[6].trimmed().toInt();
			t.length=parts[7].trimmed().toInt();
			t.StationId=parts[8].trimmed().toInt();
			t.addType=parts[9].trimmed().toInt();
			t.addDays=parts[10].trimmed().toInt();
			q.append(target);
			emit updateTrainInfo(t);
			resetStatus();
			return ;
		}
		if(IsUserLogOut)//用户登出
		{
			QString UserId=str.split("-")[1].trimmed();
			q.append(target);
			emit userLogOut(UserId);
			resetStatus();
			return;
		}
		if(IsDeleteTrain)//删除列车
		{
			QStringList parts=str.split("-");
			Train t;
			t.TrainId=parts[1].trimmed();
			t.StartTime=parts[2].trimmed();
			t.addType=parts[3].trimmed().toInt();
			q.append(target);
			emit deleteTrain(t);
			resetStatus();
			return ;
		}
	}
}
void MyTcpServer::clientDisconnected()
{
	QTcpSocket *target=(QTcpSocket *)sender();
	emit newdebug(QString("a client disconnected!"));
	_clients.removeOne(target);
	emit update();
}
MyTcpServer::~MyTcpServer()
{
	qDeleteAll(_clients);
	_clients.clear();
}
void MyTcpServer::resetStatus()
{
	IsLogin=false;
	IsRegister=false;
	IsTicketBought=false;
	IsMidQuery=false;
	IsSearchTrain=false;
	IsBuyTicket=false;
	IsReturn=false;
	IsPay=false;
	IsUpdateInfo=false;
	IsUpdateAdmininfo=false;
	IsDeleteTrain=false;
	IsUpdateTrainInfo=false;
	IsAddTrainInfo=false;
	IsUserLogOut=false;
	IsSeatBought=false;
}
#include "railway.h"
#include "mainwindow.h"
#include <qdebug>
#include <QmessageBox>
Railway::Railway(QWidget *parent)
	: QMainWindow(parent)
{
	ui.setupUi(this);
	flag=false;
	connect(ui.pushButton,SIGNAL(clicked()),this,SLOT(onclicked()));
	//connect(ui.spinBox,SIGNAL(editingFinished()),this,SLOT(onclicked()));
}
void Railway::onclicked()
{
	if (flag)//貌似editingFinished这个signal有点小问题。。。会触发两次
		return ;
	flag=true;
	if (ui.spinBox->value()==0)
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("端口不能为0！"));
		msgBox.exec();
		flag=false;
		return;
	}
	if (!ui.lineEdit->text().contains("db"))
	{
		QMessageBox msgBox;
		msgBox.setText(QStringLiteral("请输入合适的数据库名！"));
		msgBox.exec();
		flag=false;
		return;
	}
	qDebug()<<QString("Your assigned port is %1").arg(ui.spinBox->value());
	mainwindow *m=new mainwindow(ui.spinBox->value(),ui.lineEdit->text());
	m->show();
	setVisible(false);
}
Railway::~Railway()
{

}
#include "userinfo.h"

UserInfo::UserInfo(QWidget *parent)
	: QDialog(parent)
{
	ui.setupUi(this);
}
UserInfo::UserInfo(QStringList list)
{
	ui.setupUi(this);
	QString UserId,Password,name,sex,cre,contact,nation,identity,addition;
	UserId=list[0];
	Password=list[1];
	name=list[2];
	sex=list[3];
	cre=list[4];
	contact=list[5];
	nation=list[6];
	identity=list[7];
	addition=list[8];
	ui.UserIdLabel->setText(UserId);
	ui.PassWordLabel->setText(Password);
	ui.NameLabel->setText(name);
	ui.SexLabel->setText(sex);
	ui.CreLabel->setText(cre);
	ui.ContactLabel->setText(contact);
	ui.IdentityLabel->setText(identity);
	ui.regionLabel->setText(nation);
	ui.AdditionLabel->setText(addition);
	ui.LogInLabel->setText(list[9]);
	ui.LogOutLabel->setText(list[10]);
}

UserInfo::~UserInfo()
{

}


